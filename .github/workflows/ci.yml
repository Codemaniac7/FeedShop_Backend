name: Spring Boot CI Pipeline

on:
  push:
    branches: ["main", "develop"]
  pull_request:
    branches: ["main", "develop"]

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      checks: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"
          cache: "gradle"

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Clean and Test
        run: |
          ./gradlew clean
          ./gradlew test jacocoTestReport --info --stacktrace
        env:
          SPRING_PROFILES_ACTIVE: test
          APP_VERIFICATION_URL: ${{ secrets.APP_VERIFICATION_URL || 'http://localhost:8080' }}
          JWT_SECRET: ${{ secrets.TEST_JWT_SECRET || 'test-jwt-secret-key-for-ci-testing-only-not-for-production-use' }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID || 'test-google-client-id' }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET || 'test-google-client-secret' }}
          KAKAO_CLIENT_ID: ${{ secrets.KAKAO_CLIENT_ID || 'test-kakao-client-id' }}
          KAKAO_CLIENT_SECRET: ${{ secrets.KAKAO_CLIENT_SECRET || 'test-kakao-client-secret' }}
          MAILGUN_API_KEY: test-mailgun-api-key
          MAILGUN_DOMAIN: test.mailgun.org
          MAILGUN_EMAIL: test@mailgun.org
          RECAPTCHA_SECRET_KEY: test-recaptcha-secret-key
          TZ: UTC

      - name: Build Project
        run: ./gradlew build -x test

      - name: Publish Test Report
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: JUnit Test Results
          path: "build/test-results/test/TEST-*.xml"
          reporter: java-junit
          fail-on-error: false

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: build/test-results/test/

      - name: Upload Test Coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-coverage
          path: build/reports/jacoco/test/jacocoTestReport.xml

  sonar:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"
          cache: "gradle"

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Download Test Coverage
        uses: actions/download-artifact@v4
        with:
          name: test-coverage
          path: build/reports/jacoco/test/

      - name: Download Test Results
        uses: actions/download-artifact@v4
        with:
          name: test-results
          path: build/test-results/test/

      - name: Build for SonarCloud
        run: ./gradlew compileJava compileTestJava

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
            -Dsonar.java.binaries=build/classes/java/main
            -Dsonar.coverage.jacoco.xmlReportPaths=build/reports/jacoco/test/jacocoTestReport.xml
            -Dsonar.junit.reportPaths=build/test-results/test
