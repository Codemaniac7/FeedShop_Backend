spring.application.name=${SPRING_APPLICATION_NAME:feedshop-local}

# 로컬 Docker MySQL 설정
spring.datasource.url=jdbc:mysql://${DB_HOST:localhost}:${DB_PORT:3308}/${DB_NAME:feedshop_dev}?allowPublicKeyRetrieval=true&useSSL=false&serverTimezone=Asia/Seoul&characterEncoding=UTF-8
spring.datasource.username=${DB_USERNAME:devuser}
spring.datasource.password=${DB_PASSWORD:dev123!!}
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# JPA 설정 (로컬 개발용)
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.devtools.restart.enabled=true
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect

# 서버 설정 (SSL 비활성화)
server.port=${SERVER_PORT:8080}
server.ssl.enabled=false

# 시간 설정
spring.jackson.time-zone=Asia/Seoul
spring.jpa.properties.hibernate.jdbc.time_zone=Asia/Seoul

# 파일 업로드 설정
spring.servlet.multipart.enabled=true
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB
spring.servlet.multipart.file-size-threshold=2KB

# form data
spring.mvc.hiddenmethod.filter.enabled=true

# 메일 설정 (테스트용)
mailgun.api.key=${MAILGUN_API_KEY:test-key}
mailgun.domain=${MAILGUN_DOMAIN:test.local}
mailgun.from.email=${MAILGUN_EMAIL:test@local.dev}

# 파일 스토리지 설정 (로컬 파일 시스템 사용)
spring.cloud.gcp.project-id=${GCS_ID:test-project}
spring.cloud.gcp.storage.bucket=${GCS_DEV_BUCKET:test-bucket}
spring.cloud.gcp.storage.auto-create-buckets=false
file.upload.base-path=./local-uploads
file.upload.cache-period=3600
app.cdn.base-url=http://localhost:8080

# 로컬 파일 업로드 디렉토리 생성
spring.servlet.multipart.location=./local-uploads/temp

# 로깅 설정
logging.level.org.springframework=INFO
logging.level.root=INFO
logging.level.com.cMall.feedShop=DEBUG
logging.level.com.cMall.feedShop.common.aop=INFO

# 로깅 패턴
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%X{traceId:-}] %logger{36} - %msg%n

# 액추에이터 설정
management.endpoints.web.exposure.include=health,info,cache
management.endpoint.health.show-details=always

# URL 설정 (로컬용)
app.verification-url=http://localhost:8080/api/auth/verify-email?token=
app.password-reset-url=http://localhost:3000/reset-password

# reCAPTCHA 설정 (비활성화)
recaptcha.enabled=false
recaptcha.secret-key=${RECAPTCHA_SECRET_KEY:test-key}
recaptcha.score-threshold=0.5

# JWT 설정
jwt.secret=${JWT_SECRET:local-dev-jwt-secret-key-for-testing-only}
jwt.access-token-expiration-ms=3600000
jwt.refresh-token-expiration-ms=1209600000

# OAuth2 설정 (비활성화)
app.oauth2.authorized-redirect-uri=http://localhost:3000/auth/callback

# Google OAuth (테스트용)
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID:test-google-client-id}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET:test-google-client-secret}
spring.security.oauth2.client.registration.google.scope=profile,email
spring.security.oauth2.client.registration.google.redirect-uri=http://localhost:8080/login/oauth2/code/google

# Kakao OAuth (테스트용)
spring.security.oauth2.client.registration.kakao.client-id=${KAKAO_CLIENT_ID:test-kakao-client-id}
spring.security.oauth2.client.registration.kakao.client-secret=${KAKAO_CLIENT_SECRET:test-kakao-client-secret}
spring.security.oauth2.client.registration.kakao.client-authentication-method=client_secret_post
spring.security.oauth2.client.registration.kakao.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.kakao.redirect-uri=http://localhost:8080/login/oauth2/code/kakao
spring.security.oauth2.client.registration.kakao.scope=account_email,profile_nickname,profile_image

# Spring AI (비활성화)
ai.enabled=false
spring.ai.openai.api-key=${OPENAI_API_KEY:test-openai-key}

# Cache Configuration (로컬 테스트환경)
# Caffeine Cache (L1) 설정 - 로컬 테스트용
spring.cache.caffeine.maximum-size=${CAFFEINE_MAX_SIZE:200}
spring.cache.caffeine.expire-after-write=${CAFFEINE_EXPIRE_MINUTES:10}
spring.cache.caffeine.record-stats=${CAFFEINE_RECORD_STATS:true}

# Redis Cache (L2) 설정 - 로컬 Docker Redis
spring.cache.redis.enabled=${REDIS_ENABLED:true}
spring.cache.redis.time-to-live=15
spring.data.redis.host=${REDIS_HOST:localhost}
spring.data.redis.port=${REDIS_PORT:6379}
spring.data.redis.password=${REDIS_PASSWORD:}
spring.data.redis.timeout=2000ms
spring.data.redis.lettuce.pool.max-active=8
spring.data.redis.lettuce.pool.max-idle=8
spring.data.redis.lettuce.pool.min-idle=0